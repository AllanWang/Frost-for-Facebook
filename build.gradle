// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${KOTLIN}"
        classpath 'io.fabric.tools:gradle:1.+'
        classpath 'com.github.triplet.gradle:play-publisher:1.2.0'
//https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit
//        classpath 'org.eclipse.jgit:org.eclipse.jgit:4.8.0.201706111038-r'
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task generateChangelogMd() {
    def parsedProjectXml = (new XmlParser()).parse("$project.rootDir/app/src/main/res/xml/changelog.xml")
    def sw = new StringWriter()
    sw.append("# Changelog\n")
    parsedProjectXml.depthFirst().each {
        switch (it.name()) {
            case "version":
                sw.append("\n## ${it.@title}\n")
                break
            case "item":
                if (it.@text?.trim())
                    sw.append("* ${it.@text}\n")
        }
    }
    def changelogMd = new File("$project.rootDir/docs/Changelog.md")
    changelogMd.write(sw.toString())
}

//ext.commitCount = { ->
//    def repo
//    def count = 0
//    try {
//        repo = new FileRepositoryBuilder()
//                .readEnvironment()
//                .findGitDir(project.projectDir)
//                .build()
//    } catch (IllegalArgumentException ignore) {
//        // No repo found
//        return count
//    }
//
//    def git = Git.wrap(repo)
//    def commits = git.log().call()
//    return commits.size()
//}