plugins {
    id 'com.gladed.androidgitversion' version '0.3.4'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'
apply plugin: 'com.github.triplet.play'

play {
    jsonFile = file('../files/gplay-keys.json')
    track = 'beta'
    uploadImages = false
    untrackOld = true
}

android {
    compileSdkVersion Integer.parseInt(project.TARGET_SDK)
    buildToolsVersion project.BUILD_TOOLS

	def offset = System.getenv("TRAVIS_BUILD_NUMBER") ?: 0
	
    androidGitVersion {
        baseCode offset
        codeFormat = 'MMNNPPXX'
        prefix 'v'
    }

    playAccountConfigs {
        defaultAccountConfig {
            jsonFile = file('../files/gplay-keys.json')
        }
    }

    defaultConfig {
        applicationId "${project.APP_GROUP}." + project.APP_ID.toLowerCase()
        minSdkVersion Integer.parseInt(project.MIN_SDK)
        targetSdkVersion Integer.parseInt(project.TARGET_SDK)
        versionCode androidGitVersion.code()
        versionName androidGitVersion.name()
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFile = new File(output.outputFile.parent,
                    "${project.APP_ID}-${variant.buildType.name}.apk")
        }
    }

    signingConfigs {

        def releaseProps = new Properties()
        file("../files/play.properties").withInputStream { releaseProps.load(it) }

        release {
            storeFile file("../files/play.keystore")
            storePassword releaseProps.getProperty('storePassword')
            keyAlias releaseProps.getProperty('keyAlias')
            keyPassword releaseProps.getProperty('keyPassword')
        }

        test {
            storeFile file("../files/test.keystore")
            storePassword "testkey"
            keyAlias "testKey"
            keyPassword "testkey"
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            resValue "string", "app_name", "Frost Debug"
            resValue "string", "frost_web", "Frost Web Debug"
        }
        releaseTest {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix ".test"
            signingConfig signingConfigs.test
            versionNameSuffix "-test"
            resValue "string", "app_name", "Frost Test"
            resValue "string", "frost_web", "Frost Web Test"
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            resValue "string", "app_name", "Frost"
            resValue "string", "frost_web", "Frost Web"
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    packagingOptions {
        pickFirst 'META-INF/library_release.kotlin_module'
    }
}

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://jitpack.io" }
    maven { url 'https://maven.google.com' }
    maven { url 'https://maven.fabric.io/public' }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.3-alpha', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'

    compile "ca.allanwang:kau:${KAU}"

    compile "org.jetbrains.kotlin:kotlin-stdlib:${KOTLIN}"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:${KOTLIN}"

    debugCompile "com.squareup.leakcanary:leakcanary-android:${LEAK_CANARY}"
    releaseTestCompile "com.squareup.leakcanary:leakcanary-android-no-op:${LEAK_CANARY}"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:${LEAK_CANARY}"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:${LEAK_CANARY}"

    compile "com.github.Raizlabs.DBFlow:dbflow:${DBFLOW}"
    compile "com.github.Raizlabs.DBFlow:dbflow-core:${DBFLOW}"
    kapt "com.github.Raizlabs.DBFlow:dbflow-processor:${DBFLOW}"
    compile "com.github.Raizlabs.DBFlow:dbflow-kotlinextensions:${DBFLOW}"

    //Icons
    compile "com.mikepenz:material-design-iconic-typeface:${IICON_MATERIAL}@aar"
    compile "com.mikepenz:community-material-typeface:${IICON_COMMUNITY}@aar"

    compile "org.jsoup:jsoup:${JSOUP}"

    compile "com.github.bumptech.glide:glide:${GLIDE}"
    kapt "com.github.bumptech.glide:compiler:${GLIDE}"

//    compile("com.mikepenz:materialdrawer:${MATERIAL_DRAWER}@aar") {
//        transitive = true
//    }
    compile "co.zsmb:materialdrawer-kt:${MATERIAL_DRAWER_KT}"

    compile "nz.bradcampbell:paperparcel:${PAPER_PARCEL}"
    compile "nz.bradcampbell:paperparcel-kotlin:${PAPER_PARCEL}"
    kapt "nz.bradcampbell:paperparcel-compiler:${PAPER_PARCEL}"

    compile "com.jude:swipebackhelper:${SWIPE_BACK}"

    compile("com.crashlytics.sdk.android:crashlytics:${CRASHLYTICS}@aar") {
        transitive = true;
    }

}